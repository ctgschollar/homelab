version: "3.9"

networks:
  app-net:
    driver: overlay
    attachable: true
  traefik-net:
    external: true

volumes:
  model-cache: {}

services:
  database:
    image: ghcr.io/immich-app/postgres:14-vectorchord0.3.0-pgvectors0.2.0
    env_file: /mnt/cephfs-configs/immich/.env
    environment:
      POSTGRES_INITDB_ARGS: "--data-checksums"
      # DB_STORAGE_TYPE: "HDD"   # uncomment if your DB disk is HDD
    volumes:
      - type: bind
        source: /root/postgres
        target: /var/lib/postgresql/data
    shm_size: 128mb
    networks: [app-net]
    deploy:
      placement:
        constraints:
          - node.labels.media == true
      restart_policy:
        condition: on-failure

  redis:
    # Official compose now uses Valkey (Redis-compatible)
    image: docker.io/valkey/valkey:8-bookworm
    networks: [app-net]
    deploy:
      placement:
        constraints:
          - node.labels.media == true
      restart_policy:
        condition: on-failure

  immich-machine-learning:
    image: ghcr.io/immich-app/immich-machine-learning:release
    volumes:
      - type: volume
        source: model-cache
        target: /cache
    networks: [app-net]
    deploy:
      placement:
        constraints:
          - node.labels.media == true
      restart_policy:
        condition: on-failure

  immich-server:
    image: ghcr.io/immich-app/immich-server:release
    env_file: /mnt/cephfs-configs/immich/.env
    environment:
      # Set TZ if you like: TZ=Africa/Johannesburg
      DB_HOSTNAME: database
      DB_PORT: "5432"
      REDIS_HOSTNAME: redis
      # Optional but helps future integrity checks:
      # IMMICH_MEDIA_LOCATION: /data
    volumes:
      - type: bind
        source: /mnt/shared/immich/library
        target: /usr/src/app/upload
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
    depends_on:
      - redis
      - database
    networks: [app-net, traefik-net]
    deploy:
      placement:
        constraints:
          - node.labels.media == true
      restart_policy:
        condition: on-failure
      labels:
        traefik.enable: "true"
        traefik.docker.network: traefik-net
        traefik.http.routers.immich.rule: Host(`immich.schollar.dev`)
        traefik.http.routers.immich.entrypoints: websecure
        traefik.http.routers.immich.tls: "true"
        traefik.http.routers.immich.tls.certresolver: cf
        traefik.http.services.immich.loadbalancer.server.port: "2283"

        # Prometheus Blackbox monitoring
        prometheus.blackbox: "true"
        metrics.probe_url: "https://immich.schollar.dev"

